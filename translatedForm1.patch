diff --git a/conf/app.json b/conf/app.json
index 5545826..788fb9f 100644
--- a/conf/app.json
+++ b/conf/app.json
@@ -19,6 +19,13 @@
       "FSTG, Priority": {
         "dropdown": true
       },
+      "SA, Clindamycin":{
+        "multiSelect":true
+      },
+      "SA, Ciprofloxacin":{
+        "multiSelect":true
+      },
+
       "OR, Operation performed": {
         "autocomplete": true,
         "codedConceptName": "OR, Operation performed coded",
diff --git a/conf/bahmni-mart.json b/conf/bahmni-mart.json
index 643efe8..3161597 100644
--- a/conf/bahmni-mart.json
+++ b/conf/bahmni-mart.json
@@ -40,6 +40,11 @@
         }
       ]
     },
+    {
+      "name": "Provider",
+      "type": "provider",
+      "chunkSizeToRead": "500"
+    },
     {
       "name": "Visits And Encounters",
       "type": "visitsAndEncounters",
@@ -63,6 +68,7 @@
         "separateTables": [
         ]
       },
+      "locale": "fr",
       "conceptReferenceSource": "",
       "ignoreAllFreeTextConcepts": true,
       "columnsToIgnore": [
diff --git a/src/main/java/org/bahmni/mart/config/stepconfigurer/Form2StepConfigurer.java b/src/main/java/org/bahmni/mart/config/stepconfigurer/Form2StepConfigurer.java
index 1cf46d4..e548b1c 100644
--- a/src/main/java/org/bahmni/mart/config/stepconfigurer/Form2StepConfigurer.java
+++ b/src/main/java/org/bahmni/mart/config/stepconfigurer/Form2StepConfigurer.java
@@ -33,6 +33,7 @@ public class Form2StepConfigurer extends StepConfigurer {
     protected List<BahmniForm> getAllForms() {
         JobDefinition jobDefinition = getJobDefinitionByType(jobDefinitionReader.getJobDefinitions(), TYPE);
         Map<String, String> allLatestFormPaths = formService.getAllLatestFormPaths();
-        return FormListHelper.flattenFormList(form2ListProcessor.getAllForms(allLatestFormPaths, jobDefinition));
+        Map<String, String> formNameTranslations = formService.getFormNameTranslations(jobDefinition.getLocale());
+        return FormListHelper.flattenFormList(form2ListProcessor.getAllForms(allLatestFormPaths, jobDefinition, formNameTranslations));
     }
 }
diff --git a/src/main/java/org/bahmni/mart/form/domain/BahmniForm.java b/src/main/java/org/bahmni/mart/form/domain/BahmniForm.java
index bbad6a1..588424f 100644
--- a/src/main/java/org/bahmni/mart/form/domain/BahmniForm.java
+++ b/src/main/java/org/bahmni/mart/form/domain/BahmniForm.java
@@ -10,6 +10,7 @@ public class BahmniForm {
     private BahmniForm parent;
     private BahmniForm rootForm;
     private Concept formName;
+    private String translatedFormName;
     private int depthToParent;
     private List<Concept> fields = new ArrayList<>();
     private boolean isNonConceptForm = false;
@@ -83,4 +84,12 @@ public class BahmniForm {
     public Map<String, String> getFieldNameAndFullySpecifiedNameMap() {
         return fieldNameAndFullySpecifiedNameMap;
     }
+
+    public String getTranslatedFormName() {
+        return translatedFormName;
+    }
+
+    public void setTranslatedFormName(String translatedFormName) {
+        this.translatedFormName = translatedFormName;
+    }
 }
diff --git a/src/main/java/org/bahmni/mart/form2/Form2ListProcessor.java b/src/main/java/org/bahmni/mart/form2/Form2ListProcessor.java
index ab50e54..9246cf1 100644
--- a/src/main/java/org/bahmni/mart/form2/Form2ListProcessor.java
+++ b/src/main/java/org/bahmni/mart/form2/Form2ListProcessor.java
@@ -53,16 +53,16 @@ public class Form2ListProcessor {
         this.form2TranslationsReader = form2TranslationsReader;
     }
 
-    public List<BahmniForm> getAllForms(Map<String, String> allLatestFormPaths, JobDefinition jobDefinition) {
+    public List<BahmniForm> getAllForms(Map<String, String> allLatestFormPaths, JobDefinition jobDefinition, Map<String, String> formNameTranslationsMap) {
         this.jobDefinition = jobDefinition;
         ignoreConcepts = ignoreColumnsConfigHelper.getIgnoreConceptsForJob(jobDefinition);
         ArrayList<BahmniForm> allBahmniForms = allLatestFormPaths.keySet().stream().map(formName ->
-                getBahmniForm(formService.getTranslated(formName), allLatestFormPaths.get(formName)))
+                getBahmniForm(formName, allLatestFormPaths.get(formName), formNameTranslationsMap.get(formName)))
                 .collect(Collectors.toCollection(ArrayList::new));
         return FormListHelper.filterFormsWithOutDuplicateSectionsAndConcepts(allBahmniForms);
     }
 
-    private BahmniForm getBahmniForm(String formName, String formJsonPath) {
+    private BahmniForm getBahmniForm(String formName, String formJsonPath, String translatedFormName) {
         BahmniForm bahmniForm = new BahmniForm();
         Concept concept = createConcept(formName);
         bahmniForm.setFormName(concept);
@@ -71,6 +71,7 @@ public class Form2ListProcessor {
         form2JsonMetadata.getControls().forEach(control -> {
             parseControl(control, bahmniForm, 0, false);
         });
+        bahmniForm.setTranslatedFormName(translatedFormName);
         return bahmniForm;
     }
 
diff --git a/src/main/java/org/bahmni/mart/form2/service/FormService.java b/src/main/java/org/bahmni/mart/form2/service/FormService.java
index 4d05c5f..20818cb 100644
--- a/src/main/java/org/bahmni/mart/form2/service/FormService.java
+++ b/src/main/java/org/bahmni/mart/form2/service/FormService.java
@@ -24,10 +24,12 @@ public class FormService {
     JdbcTemplate openmrsDbTemplate;
     @Value("classpath:sql/form2FormList.sql")
     private Resource form2FormListResource;
+    @Value("classpath:sql/form2FormNameTranslationsList.sql")
+    private Resource form2FormNameTranslationsListResource;
 
     public Map<String, String> getAllLatestFormPaths() {
         Map<String, String> formPaths = new HashMap<>();
-        List<Map<String, Object>> forms = executeFormListQuery();
+        List<Map<String, Object>> forms = executeFormListQuery(form2FormListResource);
         for (Map<String, Object> form : forms) {
             String name = (String) form.get(FORM_NAME);
             String valueReference = (String) form.get("value_reference");
@@ -36,8 +38,8 @@ public class FormService {
         return formPaths;
     }
 
-    private List<Map<String, Object>> executeFormListQuery() {
-        final String form2FormListQuery = BatchUtils.convertResourceOutputToString(form2FormListResource);
+    private List<Map<String, Object>> executeFormListQuery(Resource resource) {
+        final String form2FormListQuery = BatchUtils.convertResourceOutputToString(resource);
         return openmrsDbTemplate.queryForList(form2FormListQuery);
     }
 
@@ -56,26 +58,22 @@ public class FormService {
         return openmrsDbTemplate.queryForList("SELECT name , MAX(version) as version FROM form GROUP BY name");
     }
 
-    public String getTranslated(String formName) {
+    public Map<String, String> getFormNameTranslations( String locale) {
         LinkedHashMap<String, String> formNameAndTranslationMap = new LinkedHashMap<>();
-        List<Map<String, Object>> forms = getFormNameTranslation();
+        List<Map<String, Object>> forms = executeFormListQuery(form2FormNameTranslationsListResource);
         for (Map<String, Object> form : forms) {
             String name = (String) form.get(FORM_NAME);
             String value_reference = (String) form.get("value_reference");
             Gson gson = new Gson();
             List<FormNameJsonMetadata> list = Arrays.asList(gson.fromJson(value_reference, FormNameJsonMetadata[].class));
 
-            String translation = list.stream().filter(nam -> (nam.getLocale().equals("fr")))
-                    .map(FormNameJsonMetadata::getDisplay).findFirst().toString();
-             translation = translation != null ? translation :  list.stream().filter(nam -> (nam.getLocale().equals("en")))
-                    .map(FormNameJsonMetadata::getDisplay).findFirst().toString();
-        formNameAndTranslationMap.put(name, translation);
+            String translation = list.stream().filter(nam -> (nam.getLocale().equals(locale)))
+                    .map(formNameJsonMetadata1 -> formNameJsonMetadata1.getDisplay()).findFirst().get();
+            translation = translation != null ? translation : list.stream().filter(nam -> (nam.getLocale().equals("en")))
+                    .map(formNameJsonMetadata -> formNameJsonMetadata.getDisplay()).findFirst().get();
+            formNameAndTranslationMap.put(name, translation);
         }
+        return formNameAndTranslationMap;
 
-        return formNameAndTranslationMap.get(formName) != null ? formNameAndTranslationMap.get(formName) : formName;
-    }
-
-    private List<Map<String, Object>> getFormNameTranslation() {
-        return openmrsDbTemplate.queryForList("select f.name, fr.value_reference from form f, form_resource fr where fr.form_id = f.form_id and fr.name like '%FormName_Translation'");
     }
 }
diff --git a/src/main/java/org/bahmni/mart/table/TableMetadataGenerator.java b/src/main/java/org/bahmni/mart/table/TableMetadataGenerator.java
index 1022a4f..9c27875 100644
--- a/src/main/java/org/bahmni/mart/table/TableMetadataGenerator.java
+++ b/src/main/java/org/bahmni/mart/table/TableMetadataGenerator.java
@@ -2,9 +2,11 @@ package org.bahmni.mart.table;
 
 import org.bahmni.mart.form.domain.BahmniForm;
 import org.bahmni.mart.form.domain.Concept;
+import org.bahmni.mart.form2.service.FormService;
 import org.bahmni.mart.helper.Constants;
 import org.bahmni.mart.table.domain.TableColumn;
 import org.bahmni.mart.table.domain.TableData;
+import org.springframework.beans.factory.annotation.Autowired;
 
 import java.util.ArrayList;
 import java.util.LinkedHashMap;
@@ -15,6 +17,9 @@ import static org.apache.commons.collections.CollectionUtils.isNotEmpty;
 
 public abstract class TableMetadataGenerator implements TableMetadataGeneratorContract {
 
+    @Autowired
+    private FormService formService;
+
     protected Map<String, TableData> tableDataMap = new LinkedHashMap<>();
 
     public List<TableData> getTableDataList() {
@@ -26,7 +31,7 @@ public abstract class TableMetadataGenerator implements TableMetadataGeneratorCo
     }
 
     public TableData getTableData(BahmniForm form) {
-        String processedFormName = getProcessedName(form.getFormName().getName());
+        String processedFormName = getProcessedName(form.getTranslatedFormName() != null ? form.getTranslatedFormName() : form.getFormName().getName());
         return getTableDataByName(processedFormName);
     }
 
@@ -41,7 +46,7 @@ public abstract class TableMetadataGenerator implements TableMetadataGeneratorCo
 
     public void addMetadataForForm(BahmniForm form) {
         TableData tableData = getTableData(form);
-        String formName = getProcessedName(form.getFormName().getName());
+        String formName = getProcessedName(form.getTranslatedFormName() != null ? form.getTranslatedFormName() : form.getFormName().getName());
         if (tableData != null) {
             tableDataMap.remove(formName);
             List<TableColumn> foreignKeyColumns = getForeignKeyColumns(form);
